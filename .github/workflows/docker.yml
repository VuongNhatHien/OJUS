name: Docker Image CI

on:
  pull_request:
    branches: [ "main" ]


jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    -
      name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up environment
      run: |
        touch ./.env
        touch ./.env.test
        mkdir -p ./codeFiles
        echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> ./.env
        echo JWT_RESET=${{ secrets.JWT_RESET }} >> ./.env
        echo CLIENT_URL=${{ secrets.CLIENT_URL }} >> ./.env
        echo EMAIL_USER=${{ secrets.EMAIL_USER }} >> ./.env
        echo EMAIL_PASS=${{ secrets.EMAIL_PASS }} >> ./.env
        echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> ./.env
        echo AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }} >> ./.env
        echo AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} >> ./.env
        echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> ./.env
        echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> ./.env
        echo DATABASE_URL=${{ secrets.DATABASE_URL_TEST }} >> ./.env.test
      working-directory: ./backend
      
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: nhathien/ojus-backend:latest
        context: ./backend

    - name: Pull and update Docker image
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          # Pull the latest image
          docker pull nhathien/ojus-backend:latest

          # Stop and remove the old container if it exists
          docker stop ojus-container || true
          docker rm ojus-container || true

          # Run the latest container with a temporary name
          docker run -d -p 8080:8080 nhathien/ojus-backend:latest

          # Remove dangling images (tagged as <none>)
          docker image prune -f
