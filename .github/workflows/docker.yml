name: Docker Image CI

on:
  pull_request:
    branches: [ "main" ]


jobs:
  docker-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    -
      name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up environment
      run: |
        mkdir -p ./codeFiles
        touch ./.env
        touch ./.env.test

        echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> ./.env
        echo JWT_RESET=${{ secrets.JWT_RESET }} >> ./.env
        echo CLIENT_URL=${{ secrets.CLIENT_URL }} >> ./.env
        echo EMAIL_USER=${{ secrets.EMAIL_USER }} >> ./.env
        echo EMAIL_PASS=${{ secrets.EMAIL_PASS }} >> ./.env
        echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> ./.env

        echo DO_ENDPOINT=${{ vars.DO_ENDPOINT }} >> ./.env
        echo DO_CDN_URL=${{ vars.DO_CDN_URL }} >> ./.env
        echo DO_REGION=${{ vars.DO_REGION }} >> ./.env
        echo DO_BUCKET=${{ vars.DO_BUCKET }} >> ./.env
        echo DO_ACCESS=${{ secrets.DO_ACCESS }} >> ./.env
        echo DO_SECRET=${{ secrets.DO_SECRET }} >> ./.env

        echo DATABASE_URL=${{ secrets.DATABASE_URL_TEST }} >> ./.env.test
      working-directory: ./backend
      
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: nhathien/ojus-backend:latest
        context: ./backend

    - name: Pull and update Docker image
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ vars.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          cd OJUS/backend
          git pull

          touch .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          npx prisma migrate dev --skip-generate

          # Pull the latest image
          docker pull nhathien/ojus-backend:latest

          # Stop and remove the current container
          docker stop ojus-container
          docker rm ojus-container
          
          # Run the new container
          # docker run -d --name ojus-container -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd)/codeFiles:/app/codeFiles --privileged nhathien/ojus-backend:latest
          docker compose -f docker-compose.ojus.yaml -f docker-compose.langs.yaml up -d
          
          # Remove dangling images (tagged as <none>)
          docker image prune -f
