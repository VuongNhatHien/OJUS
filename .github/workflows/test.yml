# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push: 
    branches-ignore:
      - "main"

jobs:
  build:

    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          # The MySQL docker container requires these environment variables to be set
          # so we can create and migrate the test database.
          # See: https://hub.docker.com/_/mysql
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: 123
        ports:
          # Opens port 3306 on service container and host
          # https://docs.github.com/en/actions/using-containerized-services/about-service-containers
          - 3308:3306
          # Before continuing, verify the mysql container is reachable from the ubuntu host
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    - run: npm ci
      working-directory: ./backend
    
    - run: prisma generate
      working-directory: ./backend

    - name: Set up environment
      run: |
        touch ./.env
        touch ./.env.test
        mkdir -p ./codeFiles
        echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> ./.env
        echo JWT_RESET=${{ secrets.JWT_RESET }} >> ./.env
        echo CLIENT_URL=${{ secrets.CLIENT_URL }} >> ./.env
        echo EMAIL_USER=${{ secrets.EMAIL_USER }} >> ./.env
        echo EMAIL_PASS=${{ secrets.EMAIL_PASS }} >> ./.env
        echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> ./.env
        echo AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }} >> ./.env
        echo AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} >> ./.env
        echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> ./.env
        echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> ./.env
        echo DATABASE_URL=${{ secrets.DATABASE_URL_TEST }} >> ./.env.test
      working-directory: ./backend
    - run: docker compose -f docker-compose.langs.yaml up -d
      working-directory: ./backend
    - run: npm run build --if-present
      working-directory: ./backend
    - run: npm test
      working-directory: ./backend
