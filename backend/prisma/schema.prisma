generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -------------------------------------
//               User
// -------------------------------------
model User {
  userId       Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  fullname     String
  password     String
  createdAt    DateTime @default(now())
  facebookLink String?
  githubLink   String?

  // Avatar relationship (optional file)
  avatarId Int?    @unique
  avatar   Files? @relation(fields: [avatarId], references: [fileId])

  // One user can be author of many Problems
  problems    Problem[] 
  // One user can have many Submissions
  submissions Submission[]
  // One user can have many Comments
  comments    Comment[]
}

// -------------------------------------
//              Problem
// -------------------------------------
model Problem {
  problemId   Int      @id @default(autoincrement())
  title       String   @unique
  description String   @db.Text
  status      Int      @default(0)
  difficulty  Int
  tags        String
  likes       Int      @default(0)
  dislikes    Int      @default(0)
  timeLimit   Int
  memoryLimit Int
  createdAt   DateTime @default(now())

  // Author relationship (many Problems -> one User)
  authorId Int
  author   User @relation(fields: [authorId], references: [userId])

  // One Problem can have many Submissions
  submissions Submission[]

  // One Problem can have many Comments
  comments Comment[]

  // One Problem must have one File dataset
  fileId     Int          @unique
  file       Files        @relation(fields: [fileId], references: [fileId])
}

// -------------------------------------
//               Files
// -------------------------------------
model Files {
  fileId    Int      @id @default(autoincrement())
  filename  String
  filesize  Int
  fileType  String
  url       String
  createdAt DateTime @default(now())

  problem   Problem?
  user      User?
}

// -------------------------------------
//            Submission
// -------------------------------------
model Submission {
  submissionId Int      @id @default(autoincrement())

  // Submission references a single Problem
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [problemId])

  // Submission references a single User
  userId Int
  user   User @relation(fields: [userId], references: [userId])

  code       String   @db.Text
  language   String
  verdict    String
  createdAt  DateTime @default(now())
  stderr     String   @db.LongText

  // One Submission can produce multiple Results (one per test case)
  results Result[]
}

// -------------------------------------
//              Result
// -------------------------------------
model Result {
  resultId     Int        @id @default(autoincrement())
  submissionId Int
  submission   Submission @relation(fields: [submissionId], references: [submissionId])

  output        String   @db.LongText
  testcaseIndex Int
  verdict       String
  time          Float
  memory        Int
  createdAt     DateTime @default(now())
}

// -------------------------------------
//             Comment
// -------------------------------------
model Comment {
  commentId Int      @id @default(autoincrement())

  // Self‐relation for nested comments (parent→child)
  parentCommentId Int?
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [commentId])
  replies         Comment[] @relation("CommentReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  content   String   @db.Text

  // Who wrote the comment?
  userId Int
  user   User @relation(fields: [userId], references: [userId])

  // Which Problem the comment belongs to
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [problemId])
}
