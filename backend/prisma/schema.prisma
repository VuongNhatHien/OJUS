generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  fullname  String
  password  String
  createdAt DateTime @default(now())

  problems          Problem[]
  Submission        Submission[]
  UserProblemStatus UserProblemStatus[]
}

model Problem {
  problemId   Int      @id @default(autoincrement())
  title       String   @unique
  description String   @db.Text
  status      Int      @default(0)
  difficulty  Int
  tags        String
  timeLimit   Int
  memoryLimit Int
  createdAt   DateTime @default(now())
  authorId    Int
  author      User     @relation(fields: [authorId], references: [userId])

  fileId            Int                 @unique
  file              Files               @relation(fields: [fileId], references: [fileId])
  Submission        Submission[]
  UserProblemStatus UserProblemStatus[]
}

model UserProblemStatus {
  userProblemStatusId Int      @id @default(autoincrement())
  userId              Int
  problemId           Int
  problem             Problem  @relation(fields: [problemId], references: [problemId])
  user                User     @relation(fields: [userId], references: [userId])
  createdAt           DateTime @default(now())

  @@unique([userId, problemId])
}

model Files {
  fileId    Int      @id @default(autoincrement())
  filename  String
  filesize  Int
  fileType  String
  location  String
  createdAt DateTime @default(now())
  problem   Problem? // Optional link back to Problem
}

model Submission {
  submissionId Int      @id @default(autoincrement())
  problemId    Int
  problem      Problem  @relation(fields: [problemId], references: [problemId])
  userId       Int
  user         User     @relation(fields: [userId], references: [userId])
  code         String   @db.Text
  language     String
  verdict      String
  createdAt    DateTime @default(now())
  stderr       String   @db.LongText
  Result       Result[]
}

model Result {
  resultId      Int        @id @default(autoincrement())
  submissionId  Int
  submission    Submission @relation(fields: [submissionId], references: [submissionId])
  output        String     @db.LongText
  testcaseIndex Int
  verdict       String
  time          Float
  memory        Int
  createdAt     DateTime   @default(now())
}
