generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  fullname  String
  password  String
  createdAt DateTime @default(now())

  problems   Problem[] // The problems list represents a one-to-many relationship between User and Problem (one user can author many problems).
  Submission Submission[]
}

model Problem {
  problemId   Int      @id @default(autoincrement())
  title       String   @unique
  description String
  isActive    Boolean  @default(false)
  difficulty  Int
  tags        String
  timeLimit   Int
  memoryLimit Int
  createdAt   DateTime @default(now())
  authorId    Int
  author      User     @relation(fields: [authorId], references: [userId])

  fileId     Int          @unique
  file       Files        @relation(fields: [fileId], references: [fileId])
  Submission Submission[]
  TestCase   TestCase[]
}

model Files {
  fileId    Int      @id @default(autoincrement())
  filename  String
  filesize  Int
  fileType  String
  location  String
  createdAt DateTime @default(now())
  problem   Problem? // Optional link back to Problem
}

model TestCase {
  testcaseId Int      @id @default(autoincrement())
  problemId  Int
  problem    Problem  @relation(fields: [problemId], references: [problemId])
  input      String
  output     String
  createdAt  DateTime @default(now())
  Result     Result[]
}

model Submission {
  submissionId  Int      @id @default(autoincrement())
  problemId     Int
  problem       Problem  @relation(fields: [problemId], references: [problemId])
  userId        Int
  user          User     @relation(fields: [userId], references: [userId])
  code          String
  language      String
  verdict       String
  numTestPassed Int
  createdAt     DateTime @default(now())
  Result        Result[]
}

model Result {
  resultId     Int        @id @default(autoincrement())
  submissionId Int
  submission   Submission @relation(fields: [submissionId], references: [submissionId])
  output       String
  testcaseId   Int
  testcase     TestCase   @relation(fields: [testcaseId], references: [testcaseId])
  verdict      String
  time         Float
  memory       Int
  createdAt    DateTime   @default(now())
}
