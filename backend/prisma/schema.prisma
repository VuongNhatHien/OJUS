generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  fullname     String
  password     String
  createdAt    DateTime @default(now())
  facebookLink String?
  githubLink   String?
  avatarId     Int?     @unique
  avatar       Files?   @relation(fields: [avatarId], references: [fileId])
  admin        Boolean  @default(false)
  
  problems   Problem[] // Relation to Problem model (many-to-many)
  Submission Submission[] // Relation to Submission model (many-to-many)
}

model Problem {
  problemId   Int      @id @default(autoincrement())
  title       String   @unique
  description String   @db.Text
  status      Int      @default(0)
  difficulty  Int
  tags        String
  timeLimit   Int
  memoryLimit Int
  createdAt   DateTime @default(now())
  authorId    Int
  author      User     @relation(fields: [authorId], references: [userId])

  fileId     Int          @unique
  file       Files        @relation(fields: [fileId], references: [fileId])
  Submission Submission[]
}

model Files {
  fileId    Int      @id @default(autoincrement())
  filename  String
  filesize  Int
  fileType  String
  url       String
  createdAt DateTime @default(now())
  problem   Problem?
  user      User?
}

model Submission {
  submissionId Int      @id @default(autoincrement())
  problemId    Int
  problem      Problem  @relation(fields: [problemId], references: [problemId])
  userId       Int
  user         User     @relation(fields: [userId], references: [userId])
  code         String   @db.Text
  language     String
  verdict      String
  createdAt    DateTime @default(now())
  stderr       String   @db.LongText
  Result       Result[]
}

model Result {
  resultId      Int        @id @default(autoincrement())
  submissionId  Int
  submission    Submission @relation(fields: [submissionId], references: [submissionId])
  output        String     @db.LongText
  testcaseIndex Int
  verdict       String
  time          Float
  memory        Int
  createdAt     DateTime   @default(now())
}
